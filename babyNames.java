import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;


//all modules used in the 'Baby Names' set of examples from week 4.
//data is not pre loaded
//Data can be found at https://www.dukelearntoprogram.com//course2/files.php through the "All Example Baby Name CSV Data" link.


public class babyNames {
    
    public void totalBirths(CSVParser csv){
        int male = 0;
        int female = 0;
        int total = 0;
        int numBorn = 0;
        String gender = "";
        
        for(CSVRecord rec : csv){
            numBorn = Integer.parseInt(rec.get(2));
            gender = rec.get(1);
            if(gender.equals("M")){male = male + numBorn;}
            else if(gender.equals("F")){female = female + numBorn;}
        }
        total = male + female;
        System.out.println("Male : " + male + " Female : " + female + " total : " + total);
    }//the answers this method generated for the fist two questions in the final assignment came up marked "Incorrect".
    // However, The answers generated are actually correct because the summation using excel of the data in numbers and the summation generated by this method were Identical.
    //This might indicate that there is a mistake in the correction  process of these two questions from the assignment.
    
    public int getRank(Integer year, String name, String gender){
        //String fileName = "C:\\Users\\saija\\Desktop\\us_babynames_test\\yob"+ year + ".csv";
        String fileName = "C:\\Users\\saija\\Desktop\\us_babynames_by_year\\yob"+ year + ".csv";//path pointing to each file from the dataset
        
        FileResource fr = new FileResource(fileName);
        CSVParser csv = fr.getCSVParser(false);
        Integer temp = 0;
        Integer count = 0;

        for(CSVRecord rec : csv){
            String recName = rec.get(0);
            String recGender = rec.get(1);
            Integer recNumber = Integer.parseInt(rec.get(2));
            if(recGender.equals(gender)){
                count++;
                if(recName.equals(name)){
                    return count;
                }
            }
        }
        
        return -1;
    }
    
    public String getName(Integer year, Integer rank, String gender){
        //String fileName = "C:\\Users\\saija\\Desktop\\us_babynames_test\\yob"+ year + ".csv";
        String fileName = "C:\\Users\\saija\\Desktop\\us_babynames_by_year\\yob"+ year + ".csv";//path pointing to each file from the dataset
        
        FileResource fr = new FileResource(fileName);
        CSVParser csv = fr.getCSVParser(false);
        int count = 0;
        for(CSVRecord rec : csv){
            String recName = rec.get(0);
            String recGender = rec.get(1);
            Integer recNumber = Integer.parseInt(rec.get(2));   
            
            if(recGender.equals(gender)){
                count++;
                if(count==rank){
                    return recName;
                }
            }
        }
        return "NO NAME";
    }
    
    public void whatIsNameInYear(String name, Integer year, Integer newYear, String gender){
    
        Integer rank = getRank(year,name,gender);
        String newName = getName(newYear,rank,gender);
        System.out.println(name + " born in " + year + " would be " + newName + " if she was born in " + newYear + ".");
    
    }
    
    public Integer yearOfHighestRank(String name, String gender){
        DirectoryResource dr = new DirectoryResource();
        Integer year = 0;
        Integer tempYear = -1;
        String strYear = "";
        String fileName = "";
        Integer rank = 0;
        Integer tempRank = -1;
        for(File f : dr.selectedFiles()){
            FileResource fr = new FileResource(f);
            CSVParser csv = fr.getCSVParser();
            fileName = f.getName();
            //System.out.println("Checking file : " + fileName);
            
            strYear = fileName.substring(3,7);
            year = Integer.parseInt(strYear);
            //System.out.println("Checking Year : " + year);
            
            rank = getRank(year,name,gender);
            //System.out.println("Got Rank : " + rank);
            
            if(rank!=-1){
                //System.out.println("Entered if : rank not -1");
                if(tempRank==-1){
                    //System.out.println("Entered if : tempRank -1");
                    tempRank = rank;
                    tempYear = year;
                    //System.out.println("tempRank updated to " + rank);
                }
                else{
                    if(rank<tempRank){
                        //System.out.println("Entered if : rank<tempRank");
                        tempRank = rank;
                        tempYear = year;
                    }
                }
                
            }
            
        }
        
        return tempYear;
    }
    
    public double getAverageRank(String name, String gender){
        DirectoryResource dr = new DirectoryResource();
        Integer year = 0;
        String strYear = "";
        String fileName = "";
        Integer rank = 0;
        Integer tempRank = 0;
        Double count = 0.0;
        boolean flag = false;
        for(File f : dr.selectedFiles()){
            FileResource fr = new FileResource(f);
            CSVParser csv = fr.getCSVParser();
            fileName = f.getName();
            //System.out.println("Checking file : " + fileName);
            
            strYear = fileName.substring(3,7);
            year = Integer.parseInt(strYear);
            //System.out.println("Checking Year : " + year);
            
            rank = getRank(year,name,gender);
            //System.out.println("Got Rank : " + rank);
            
            if(rank!=-1){
                flag = true;
                tempRank = tempRank + rank;
                count = count + 1.0;
            }
            
        }
        if(flag){
            Double doubRank = tempRank.doubleValue();
            return doubRank/count;
        }
        return -1.0;
    }
    
    public Integer getTotalBirthsRankedHigher(Integer year, String name, String gender){
        //String fileName = "C:\\Users\\saija\\Desktop\\us_babynames_test\\yob"+ year + ".csv";
        String fileName = "C:\\Users\\saija\\Desktop\\us_babynames_by_year\\yob"+ year + ".csv";
        FileResource fr = new FileResource(fileName);
        CSVParser csv = fr.getCSVParser(false);
        Integer subjectRank = getRank(year,name,gender);
        if(subjectRank==-1){return -1;}//if subject does not exist, stop looking further
        
        Integer temp = 0;
        Integer count = 0;
        
        for(CSVRecord rec : csv){
            String recName = rec.get(0);
            String recGender = rec.get(1);
            Integer recNumber = Integer.parseInt(rec.get(2));
            
            if(recGender.equals(gender)){
                count++;//compute each rank
                if(count<subjectRank){
                    temp = temp + recNumber;
                }
            }
        }
        return temp;
    }
    
    public void testGetTotalBirthsRankedHigher(){
        Integer total;
        
        total = getTotalBirthsRankedHigher(1990,"Drew","M");//(year,name,gender)
        System.out.println("total Births ranked higher : " + total);
       
    }
    
    public void testGetAverageRank(){
        double avg;
        
        avg = getAverageRank("Robert","M");//(name, gender)
        System.out.println("Average Rank : " + avg);

    }
    
    public void testYearOfHighestRank(){
        int year = 0;
        
        year = yearOfHighestRank("Mich","M");//(name,gender)
        System.out.println("Year with Highest rank : " + year);
        
    }
    
    public void testWhatIsNameInYear(){
        whatIsNameInYear("Owen",1974,2014,"M");//(name,actual YOB, 'what if' YOB, gender)
    }
    
    public void testGetName(){
    String name = "";
    name = getName(1982,450,"M");//(year,rank,gender)
    System.out.println("Name = "+name);
    
    }
    
    public void testGetRank(){
        int rank;
        rank = getRank(1971,"Frank","M");//(year,name,gender)
        System.out.println("Rank = " + rank);
    }
    
    public void testTotalBirths(){
        FileResource fr = new FileResource();
        CSVParser csv = fr.getCSVParser(false);
        
        totalBirths(csv);
    }

}
